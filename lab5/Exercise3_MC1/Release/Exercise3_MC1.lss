
Exercise3_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001fc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 82 00 	call	0x104	; 0x104 <main>
  7a:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <INT0_Init>:
  82:	8a 98       	cbi	0x11, 2	; 17
  84:	85 b7       	in	r24, 0x35	; 53
  86:	82 60       	ori	r24, 0x02	; 2
  88:	85 bf       	out	0x35, r24	; 53
  8a:	8b b7       	in	r24, 0x3b	; 59
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	8b bf       	out	0x3b, r24	; 59
  90:	8f b7       	in	r24, 0x3f	; 63
  92:	80 68       	ori	r24, 0x80	; 128
  94:	8f bf       	out	0x3f, r24	; 63
  96:	08 95       	ret

00000098 <__vector_1>:
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	2f 93       	push	r18
  a4:	3f 93       	push	r19
  a6:	4f 93       	push	r20
  a8:	5f 93       	push	r21
  aa:	6f 93       	push	r22
  ac:	7f 93       	push	r23
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
  b2:	af 93       	push	r26
  b4:	bf 93       	push	r27
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	92 e0       	ldi	r25, 0x02	; 2
  be:	89 27       	eor	r24, r25
  c0:	85 bb       	out	0x15, r24	; 21
  c2:	80 91 60 00 	lds	r24, 0x0060
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 60 00 	sts	0x0060, r24
  cc:	0e 94 ae 00 	call	0x15c	; 0x15c <UART_sendByte>
  d0:	80 91 60 00 	lds	r24, 0x0060
  d4:	8a 37       	cpi	r24, 0x7A	; 122
  d6:	19 f4       	brne	.+6      	; 0xde <__vector_1+0x46>
  d8:	80 e4       	ldi	r24, 0x40	; 64
  da:	80 93 60 00 	sts	0x0060, r24
  de:	82 9b       	sbis	0x10, 2	; 16
  e0:	fe cf       	rjmp	.-4      	; 0xde <__vector_1+0x46>
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	bf 91       	pop	r27
  e8:	af 91       	pop	r26
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	7f 91       	pop	r23
  f0:	6f 91       	pop	r22
  f2:	5f 91       	pop	r21
  f4:	4f 91       	pop	r20
  f6:	3f 91       	pop	r19
  f8:	2f 91       	pop	r18
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <main>:
 104:	60 e8       	ldi	r22, 0x80	; 128
 106:	75 e2       	ldi	r23, 0x25	; 37
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 94 00 	call	0x128	; 0x128 <UART_init>
 110:	84 b3       	in	r24, 0x14	; 20
 112:	83 60       	ori	r24, 0x03	; 3
 114:	84 bb       	out	0x14, r24	; 20
 116:	a8 9a       	sbi	0x15, 0	; 21
 118:	0e 94 b2 00 	call	0x164	; 0x164 <UART_recieveByte>
 11c:	80 31       	cpi	r24, 0x10	; 16
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x14>
 120:	0e 94 41 00 	call	0x82	; 0x82 <INT0_Init>
 124:	78 94       	sei
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x22>

00000128 <UART_init>:
 128:	9b 01       	movw	r18, r22
 12a:	ac 01       	movw	r20, r24
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	8b b9       	out	0x0b, r24	; 11
 130:	88 e1       	ldi	r24, 0x18	; 24
 132:	8a b9       	out	0x0a, r24	; 10
 134:	86 e8       	ldi	r24, 0x86	; 134
 136:	80 bd       	out	0x20, r24	; 32
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	22 0f       	add	r18, r18
 13c:	33 1f       	adc	r19, r19
 13e:	44 1f       	adc	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	8a 95       	dec	r24
 144:	d1 f7       	brne	.-12     	; 0x13a <UART_init+0x12>
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	74 e2       	ldi	r23, 0x24	; 36
 14a:	84 ef       	ldi	r24, 0xF4	; 244
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__udivmodsi4>
 152:	21 50       	subi	r18, 0x01	; 1
 154:	30 40       	sbci	r19, 0x00	; 0
 156:	30 bd       	out	0x20, r19	; 32
 158:	29 b9       	out	0x09, r18	; 9
 15a:	08 95       	ret

0000015c <UART_sendByte>:
 15c:	5d 9b       	sbis	0x0b, 5	; 11
 15e:	fe cf       	rjmp	.-4      	; 0x15c <UART_sendByte>
 160:	8c b9       	out	0x0c, r24	; 12
 162:	08 95       	ret

00000164 <UART_recieveByte>:
 164:	5f 9b       	sbis	0x0b, 7	; 11
 166:	fe cf       	rjmp	.-4      	; 0x164 <UART_recieveByte>
 168:	8c b1       	in	r24, 0x0c	; 12
 16a:	08 95       	ret

0000016c <UART_sendString>:
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	04 c0       	rjmp	.+8      	; 0x178 <UART_sendString+0xc>
 170:	5d 9b       	sbis	0x0b, 5	; 11
 172:	fe cf       	rjmp	.-4      	; 0x170 <UART_sendString+0x4>
 174:	ec b9       	out	0x0c, r30	; 12
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	fc 01       	movw	r30, r24
 17a:	e2 0f       	add	r30, r18
 17c:	f1 1d       	adc	r31, r1
 17e:	e0 81       	ld	r30, Z
 180:	ee 23       	and	r30, r30
 182:	b1 f7       	brne	.-20     	; 0x170 <UART_sendString+0x4>
 184:	08 95       	ret

00000186 <UART_receiveString>:
 186:	dc 01       	movw	r26, r24
 188:	5f 9b       	sbis	0x0b, 7	; 11
 18a:	fe cf       	rjmp	.-4      	; 0x188 <UART_receiveString+0x2>
 18c:	8c b1       	in	r24, 0x0c	; 12
 18e:	8c 93       	st	X, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 c0       	rjmp	.+16     	; 0x1a4 <UART_receiveString+0x1e>
 194:	9f 5f       	subi	r25, 0xFF	; 255
 196:	5f 9b       	sbis	0x0b, 7	; 11
 198:	fe cf       	rjmp	.-4      	; 0x196 <UART_receiveString+0x10>
 19a:	8c b1       	in	r24, 0x0c	; 12
 19c:	fd 01       	movw	r30, r26
 19e:	e9 0f       	add	r30, r25
 1a0:	f1 1d       	adc	r31, r1
 1a2:	80 83       	st	Z, r24
 1a4:	fd 01       	movw	r30, r26
 1a6:	e9 0f       	add	r30, r25
 1a8:	f1 1d       	adc	r31, r1
 1aa:	80 81       	ld	r24, Z
 1ac:	83 32       	cpi	r24, 0x23	; 35
 1ae:	91 f7       	brne	.-28     	; 0x194 <UART_receiveString+0xe>
 1b0:	10 82       	st	Z, r1
 1b2:	08 95       	ret

000001b4 <__udivmodsi4>:
 1b4:	a1 e2       	ldi	r26, 0x21	; 33
 1b6:	1a 2e       	mov	r1, r26
 1b8:	aa 1b       	sub	r26, r26
 1ba:	bb 1b       	sub	r27, r27
 1bc:	fd 01       	movw	r30, r26
 1be:	0d c0       	rjmp	.+26     	; 0x1da <__udivmodsi4_ep>

000001c0 <__udivmodsi4_loop>:
 1c0:	aa 1f       	adc	r26, r26
 1c2:	bb 1f       	adc	r27, r27
 1c4:	ee 1f       	adc	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	a2 17       	cp	r26, r18
 1ca:	b3 07       	cpc	r27, r19
 1cc:	e4 07       	cpc	r30, r20
 1ce:	f5 07       	cpc	r31, r21
 1d0:	20 f0       	brcs	.+8      	; 0x1da <__udivmodsi4_ep>
 1d2:	a2 1b       	sub	r26, r18
 1d4:	b3 0b       	sbc	r27, r19
 1d6:	e4 0b       	sbc	r30, r20
 1d8:	f5 0b       	sbc	r31, r21

000001da <__udivmodsi4_ep>:
 1da:	66 1f       	adc	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	88 1f       	adc	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	1a 94       	dec	r1
 1e4:	69 f7       	brne	.-38     	; 0x1c0 <__udivmodsi4_loop>
 1e6:	60 95       	com	r22
 1e8:	70 95       	com	r23
 1ea:	80 95       	com	r24
 1ec:	90 95       	com	r25
 1ee:	9b 01       	movw	r18, r22
 1f0:	ac 01       	movw	r20, r24
 1f2:	bd 01       	movw	r22, r26
 1f4:	cf 01       	movw	r24, r30
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
