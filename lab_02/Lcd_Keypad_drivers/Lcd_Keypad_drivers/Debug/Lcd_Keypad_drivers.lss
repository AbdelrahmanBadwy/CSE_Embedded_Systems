
Lcd_Keypad_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000002ec  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800066  00800066  00000386  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b42  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071f  00000000  00000000  00000fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000608  00000000  00000000  000016dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f1  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000391  00000000  00000000  000021d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002562  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
  8a:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_KICK>:
	DataDir_LCD_PORT &= ~(0xFF<<DATA_SHIFT);
	LCD_CTRL_PORT |= (1<<RW_SWITCH); //Read Mode
	LCD_CTRL_PORT &= ~(1<<RS_SWITCH); 
	LCD_KICK();
	DataDir_LCD_PORT |= (0xFF<<DATA_SHIFT);
	LCD_CTRL_PORT &= ~(1<<RW_SWITCH);
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	8b 7f       	andi	r24, 0xFB	; 251
  96:	8b bb       	out	0x1b, r24	; 27
  98:	89 ef       	ldi	r24, 0xF9	; 249
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_KICK+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_KICK+0x10>
  a2:	00 00       	nop
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	08 95       	ret

000000ac <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_WRITE_COMMAND(unsigned char command){
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	87 e8       	ldi	r24, 0x87	; 135
  b2:	93 e1       	ldi	r25, 0x13	; 19
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_WRITE_COMMAND+0x8>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_WRITE_COMMAND+0xe>
  ba:	00 00       	nop
		LCD_CTRL_PORT &= ~((1<<RW_SWITCH) | (1<<RS_SWITCH));
		LCD_KICK();
	#endif //EIGHT_BIT_MODE
	#ifdef FOUR_BIT_MODE
		//LCD_check_lcd_isbusy();
		LCD_PORT &= (LCD_PORT & 0x87);
  bc:	8b b3       	in	r24, 0x1b	; 27
  be:	9b b3       	in	r25, 0x1b	; 27
  c0:	87 78       	andi	r24, 0x87	; 135
  c2:	89 23       	and	r24, r25
  c4:	8b bb       	out	0x1b, r24	; 27
		LCD_PORT |= ((LCD_PORT & 0x87) | (command & 0xF0)>>1);
  c6:	2b b3       	in	r18, 0x1b	; 27
  c8:	27 78       	andi	r18, 0x87	; 135
  ca:	8c 2f       	mov	r24, r28
  cc:	80 7f       	andi	r24, 0xF0	; 240
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
  d4:	82 2b       	or	r24, r18
  d6:	9b b3       	in	r25, 0x1b	; 27
  d8:	89 2b       	or	r24, r25
  da:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL_PORT &= ~((1<<RW_SWITCH) | (1<<RS_SWITCH));
  dc:	8b b3       	in	r24, 0x1b	; 27
  de:	8d 7f       	andi	r24, 0xFD	; 253
  e0:	8b bb       	out	0x1b, r24	; 27
		LCD_KICK();
  e2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
		LCD_PORT &= (LCD_PORT & 0x87);
  e6:	8b b3       	in	r24, 0x1b	; 27
  e8:	9b b3       	in	r25, 0x1b	; 27
  ea:	87 78       	andi	r24, 0x87	; 135
  ec:	89 23       	and	r24, r25
  ee:	8b bb       	out	0x1b, r24	; 27
		LCD_PORT |= ((LCD_PORT & 0x87) | (command << 3));
  f0:	2b b3       	in	r18, 0x1b	; 27
  f2:	27 78       	andi	r18, 0x87	; 135
  f4:	8c 2f       	mov	r24, r28
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	82 2b       	or	r24, r18
 106:	9b b3       	in	r25, 0x1b	; 27
 108:	89 2b       	or	r24, r25
 10a:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL_PORT &= ~((1<<RW_SWITCH) | (1<<RS_SWITCH));
 10c:	8b b3       	in	r24, 0x1b	; 27
 10e:	8d 7f       	andi	r24, 0xFD	; 253
 110:	8b bb       	out	0x1b, r24	; 27
		LCD_KICK();
 112:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	#endif //FOUR_BIT_MODE
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <LCD_GOTO_XY>:
 */

#include "lcd.h"

void LCD_GOTO_XY(unsigned char line, unsigned char position){
	if (line == 1)
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	39 f4       	brne	.+14     	; 0x12c <LCD_GOTO_XY+0x12>
	{
		if (position<16 && position >=0)
 11e:	60 31       	cpi	r22, 0x10	; 16
 120:	68 f4       	brcc	.+26     	; 0x13c <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 122:	80 e8       	ldi	r24, 0x80	; 128
 124:	86 0f       	add	r24, r22
 126:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 12a:	08 95       	ret
		}
	}
	else if (line == 2){
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	31 f4       	brne	.+12     	; 0x13c <LCD_GOTO_XY+0x22>
		if (position<32 && position >=0)
 130:	60 32       	cpi	r22, 0x20	; 32
 132:	20 f4       	brcc	.+8      	; 0x13c <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 134:	80 ec       	ldi	r24, 0xC0	; 192
 136:	86 0f       	add	r24, r22
 138:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 13c:	08 95       	ret

0000013e <LCD_clear_screen>:
	LCD_KICK();
	DataDir_LCD_PORT |= (0xFF<<DATA_SHIFT);
	LCD_CTRL_PORT &= ~(1<<RW_SWITCH);
}
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 144:	08 95       	ret

00000146 <LCD_INIT>:
 146:	87 e8       	ldi	r24, 0x87	; 135
 148:	93 e1       	ldi	r25, 0x13	; 19
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_INIT+0x4>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_INIT+0xa>
 150:	00 00       	nop
}
void LCD_INIT(){
	_delay_ms(20);
	//LCD_check_lcd_isbusy();
	DataDir_LCD_CTRL |= (1<<RW_SWITCH) | (1<<RS_SWITCH) | (1<<EN_SWITCH) ;
 152:	8a b3       	in	r24, 0x1a	; 26
 154:	86 60       	ori	r24, 0x06	; 6
 156:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL_PORT &= ~((1<<RW_SWITCH) | (1<<RS_SWITCH) | (1<<EN_SWITCH));
 158:	8b b3       	in	r24, 0x1b	; 27
 15a:	89 7f       	andi	r24, 0xF9	; 249
 15c:	8b bb       	out	0x1b, r24	; 27
	DataDir_LCD_PORT = 0xFF;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	8a bb       	out	0x1a, r24	; 26
 162:	85 ea       	ldi	r24, 0xA5	; 165
 164:	9e e0       	ldi	r25, 0x0E	; 14
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_INIT+0x20>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_INIT+0x26>
 16c:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 16e:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
	#endif //EIGHT_BIT_MODE
	#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02);
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 178:	88 e2       	ldi	r24, 0x28	; 40
 17a:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
	#endif //FOUR_BIT_MODE
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 18a:	8f e0       	ldi	r24, 0x0F	; 15
 18c:	0e 94 56 00 	call	0xac	; 0xac <LCD_WRITE_COMMAND>
 190:	08 95       	ret

00000192 <LCD_WRITE_CHAR>:
		LCD_CTRL_PORT &= ~((1<<RW_SWITCH) | (1<<RS_SWITCH));
		LCD_KICK();
	#endif //FOUR_BIT_MODE
}

void LCD_WRITE_CHAR(unsigned char character){
 192:	cf 93       	push	r28
 194:	c8 2f       	mov	r28, r24
 196:	87 e8       	ldi	r24, 0x87	; 135
 198:	93 e1       	ldi	r25, 0x13	; 19
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_WRITE_CHAR+0x8>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_WRITE_CHAR+0xe>
 1a0:	00 00       	nop
	LCD_KICK();
	
	
	#endif //EIGHT_BIT_MODE
	#ifdef FOUR_BIT_MODE
	LCD_PORT &= (LCD_PORT & 0x87);
 1a2:	8b b3       	in	r24, 0x1b	; 27
 1a4:	9b b3       	in	r25, 0x1b	; 27
 1a6:	87 78       	andi	r24, 0x87	; 135
 1a8:	89 23       	and	r24, r25
 1aa:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT |= ((LCD_PORT & 0x87) | (character & 0xF0)>>1);
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	27 78       	andi	r18, 0x87	; 135
 1b0:	8c 2f       	mov	r24, r28
 1b2:	80 7f       	andi	r24, 0xF0	; 240
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	95 95       	asr	r25
 1b8:	87 95       	ror	r24
 1ba:	82 2b       	or	r24, r18
 1bc:	9b b3       	in	r25, 0x1b	; 27
 1be:	89 2b       	or	r24, r25
 1c0:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT &= ~(1<<RW_SWITCH) ;
 1c2:	8b b3       	in	r24, 0x1b	; 27
 1c4:	8d 7f       	andi	r24, 0xFD	; 253
 1c6:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT |= (1<<RS_SWITCH);
 1c8:	8b b3       	in	r24, 0x1b	; 27
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK();
 1ce:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	LCD_PORT &= (LCD_PORT & 0x87);
 1d2:	8b b3       	in	r24, 0x1b	; 27
 1d4:	9b b3       	in	r25, 0x1b	; 27
 1d6:	87 78       	andi	r24, 0x87	; 135
 1d8:	89 23       	and	r24, r25
 1da:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT |= ((LCD_PORT & 0x87) | (character << 3));
 1dc:	2b b3       	in	r18, 0x1b	; 27
 1de:	27 78       	andi	r18, 0x87	; 135
 1e0:	8c 2f       	mov	r24, r28
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	82 2b       	or	r24, r18
 1f2:	9b b3       	in	r25, 0x1b	; 27
 1f4:	89 2b       	or	r24, r25
 1f6:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT &= ~(1<<RW_SWITCH) ;
 1f8:	8b b3       	in	r24, 0x1b	; 27
 1fa:	8d 7f       	andi	r24, 0xFD	; 253
 1fc:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT |= (1<<RS_SWITCH);
 1fe:	8b b3       	in	r24, 0x1b	; 27
 200:	82 60       	ori	r24, 0x02	; 2
 202:	8b bb       	out	0x1b, r24	; 27
	LCD_KICK();
 204:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	#endif //FOUR_BIT_MODE
	
	
	
}
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <LCD_WRITE_STRING>:
void LCD_WRITE_STRING(char* data){
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	8c 01       	movw	r16, r24
	unsigned char count =0;
 214:	c0 e0       	ldi	r28, 0x00	; 0
	while(*data >0){
 216:	14 c0       	rjmp	.+40     	; 0x240 <LCD_WRITE_STRING+0x34>
		count++;
 218:	cf 5f       	subi	r28, 0xFF	; 255
		LCD_WRITE_CHAR(*data++);
 21a:	0f 5f       	subi	r16, 0xFF	; 255
 21c:	1f 4f       	sbci	r17, 0xFF	; 255
 21e:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_WRITE_CHAR>
		if (count == 16)
 222:	c0 31       	cpi	r28, 0x10	; 16
 224:	29 f4       	brne	.+10     	; 0x230 <LCD_WRITE_STRING+0x24>
		{
			LCD_GOTO_XY(2,0);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_GOTO_XY>
 22e:	08 c0       	rjmp	.+16     	; 0x240 <LCD_WRITE_STRING+0x34>
		} 
		else if(count ==32)
 230:	c0 32       	cpi	r28, 0x20	; 32
 232:	31 f4       	brne	.+12     	; 0x240 <LCD_WRITE_STRING+0x34>
		{
			LCD_clear_screen();
 234:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_GOTO_XY>
	
	
}
void LCD_WRITE_STRING(char* data){
	unsigned char count =0;
	while(*data >0){
 240:	f8 01       	movw	r30, r16
 242:	80 81       	ld	r24, Z
 244:	81 11       	cpse	r24, r1
 246:	e8 cf       	rjmp	.-48     	; 0x218 <LCD_WRITE_STRING+0xc>
			LCD_GOTO_XY(1,0);

		}
	}
	
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	08 95       	ret

00000250 <firstCase>:

#include <avr/io.h>
#include "LCD/lcd.h"
unsigned char i =0;
void firstCase(){
	for (i =0 ; i<6 ; i++)
 250:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
 254:	19 c0       	rjmp	.+50     	; 0x288 <firstCase+0x38>
	{
		LCD_clear_screen();
 256:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_clear_screen>
		LCD_GOTO_XY(1,i);
 25a:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <__data_end>
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_GOTO_XY>
		LCD_WRITE_STRING("Hello");
 264:	80 e6       	ldi	r24, 0x60	; 96
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_WRITE_STRING>
 26c:	2f e3       	ldi	r18, 0x3F	; 63
 26e:	8d e0       	ldi	r24, 0x0D	; 13
 270:	93 e0       	ldi	r25, 0x03	; 3
 272:	21 50       	subi	r18, 0x01	; 1
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <firstCase+0x22>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <firstCase+0x2c>
 27c:	00 00       	nop

#include <avr/io.h>
#include "LCD/lcd.h"
unsigned char i =0;
void firstCase(){
	for (i =0 ; i<6 ; i++)
 27e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 282:	8f 5f       	subi	r24, 0xFF	; 255
 284:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 288:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 28c:	86 30       	cpi	r24, 0x06	; 6
 28e:	18 f3       	brcs	.-58     	; 0x256 <firstCase+0x6>
		LCD_clear_screen();
		LCD_GOTO_XY(1,i);
		LCD_WRITE_STRING("Hello");
		_delay_ms(1000);
	}
}
 290:	08 95       	ret

00000292 <secendCase>:
void  secendCase(){
	for (i =4 ; i>0 ; i--)
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 298:	19 c0       	rjmp	.+50     	; 0x2cc <secendCase+0x3a>
	{
		LCD_clear_screen();
 29a:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_clear_screen>
		LCD_GOTO_XY(1,i);
 29e:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <__data_end>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_GOTO_XY>
		LCD_WRITE_STRING("Hello");
 2a8:	80 e6       	ldi	r24, 0x60	; 96
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_WRITE_STRING>
 2b0:	2f e3       	ldi	r18, 0x3F	; 63
 2b2:	8d e0       	ldi	r24, 0x0D	; 13
 2b4:	93 e0       	ldi	r25, 0x03	; 3
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <secendCase+0x24>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <secendCase+0x2e>
 2c0:	00 00       	nop
		LCD_WRITE_STRING("Hello");
		_delay_ms(1000);
	}
}
void  secendCase(){
	for (i =4 ; i>0 ; i--)
 2c2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 2c6:	81 50       	subi	r24, 0x01	; 1
 2c8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 2cc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 2d0:	81 11       	cpse	r24, r1
 2d2:	e3 cf       	rjmp	.-58     	; 0x29a <secendCase+0x8>
		LCD_clear_screen();
		LCD_GOTO_XY(1,i);
		LCD_WRITE_STRING("Hello");
		_delay_ms(1000);
	}
}
 2d4:	08 95       	ret

000002d6 <main>:
int main(void)
{
	LCD_INIT();
 2d6:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_INIT>
    /* Replace with your application code */
    while (1) 
    {
		firstCase();
 2da:	0e 94 28 01 	call	0x250	; 0x250 <firstCase>
		LCD_clear_screen();
 2de:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_clear_screen>
		secendCase();
 2e2:	0e 94 49 01 	call	0x292	; 0x292 <secendCase>
 2e6:	f9 cf       	rjmp	.-14     	; 0x2da <main+0x4>

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
